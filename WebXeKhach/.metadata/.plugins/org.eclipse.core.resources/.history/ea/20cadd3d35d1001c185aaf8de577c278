package ptit.controller;

import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import ptit.entity.*;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class QuanLyController {
	@Autowired
	SessionFactory factory;
	
	public List<ChuyenXe> dscx(){
		Session session = factory.getCurrentSession();
		String hql = "from ChuyenXe";
		Query query = session.createQuery(hql);
		List<ChuyenXe> list = query.list();
		return list;
	}
	public List<TuyenXe> dstx(){
		Session session = factory.getCurrentSession();
		String hql = "from TuyenXe";
		Query query = session.createQuery(hql);
		List<TuyenXe> list = query.list();
		return list;
	}
	public List<NhanVien> dsnv(){
		Session session = factory.getCurrentSession();
		String hql = "from NhanVien";
		Query query = session.createQuery(hql);
		List<NhanVien> list = query.list();
		return list;
	}
	public List<XeKhach> dsxk(){
		Session session = factory.getCurrentSession();
		String hql = "from XeKhach";
		Query query = session.createQuery(hql);
		List<XeKhach> list = query.list();
		return list;
	}
	public ChuyenXe xetheoid(String machuyen) {
		Session session = factory.openSession();
		Transaction  transaction = session.beginTransaction();
		ChuyenXe chuyen = null;
		try {
			chuyen = (ChuyenXe) session.load(ChuyenXe.class, machuyen);
			transaction.commit();
		}catch(Exception e) {
			transaction.rollback();
		}finally {
			session.close();
		}
		return chuyen;
	}
	public TuyenXe tuyentheoid(String ma) {
		Session session = factory.openSession();
		Transaction  transaction = session.beginTransaction();
		TuyenXe tuyen = null;
		try {
			tuyen = (TuyenXe) session.load(TuyenXe.class, ma);
			transaction.commit();
			return tuyen;
		}catch(Exception e) {
			transaction.rollback();
			
		}finally {
			session.close();
		}
		return tuyen;
	}
	public XeKhach xekhachtheoid(String ma) {
		Session session = factory.openSession();
		Transaction  transaction = session.beginTransaction();
		XeKhach xe = null;
		try {
			xe = (XeKhach) session.load(XeKhach.class, ma);
			transaction.commit();
			return xe;
		}catch(Exception e) {
			transaction.rollback();
		}finally {
			session.close();
		}
		return xe;
	}
	public NhanVien nvtheoid(String ma) {
		Session session = factory.openSession();
		Transaction  transaction = session.beginTransaction();
		NhanVien nv = null;
		try {
			nv = (NhanVien) session.load(NhanVien.class, ma);
			transaction.commit();
		}catch(Exception e) {
			transaction.rollback();
		}finally {
			session.close();
		}
		return nv;
	}
	@RequestMapping(value = "/QL_TrangChu")
	public String TrangChu() {
		return "QuanLy/trangchu";
	}
	@Transactional
	@RequestMapping("/QL_ChuyenXe")
	public String ChuyenXe(ModelMap model) {
		List<ChuyenXe> list = dscx();
		model.addAttribute("list", list);
		return "QuanLy/chuyenxe";
	}
	@Transactional
	@RequestMapping(value = "/QL_ChuyenXe/{machuyen}", params = "info")
	public String ChuyenXeInfo(ModelMap model, @PathVariable("machuyen") String ma) {
		model.addAttribute("idModal", "modalShow");
		List<ChuyenXe> list = dscx();
		ChuyenXe chuyen = xetheoid(ma);
		model.addAttribute("list", list);
		model.addAttribute("chuyen", chuyen);
		return "QuanLy/chuyenxe";
	}
	@Transactional
	@RequestMapping(value = "/QL_ChuyenXe/{machuyen}", params = "update",method = RequestMethod.GET)
	public String ChuyenXeUpdate(ModelMap model, @PathVariable("machuyen") String ma) {
		Session session = factory.openSession();
		ChuyenXe chuyen = xetheoid(ma);
		model.addAttribute("idModal", "modalUpdate");
		List<ChuyenXe> listcx = dscx();
		model.addAttribute("list", listcx);
		List<TuyenXe> listtx = dstx();
		for(int i =0;i<listtx.size();i++) {
			if(listtx.get(i).getMaTuyen().equals(chuyen.getTuyen().getMaTuyen())) {
				listtx.remove(i);
				break;
			}
		}
		List<NhanVien> listnv = dsnv();
		for(int i =0;i<listnv.size();i++) {
			if(listnv.get(i).getMaNV().equals(chuyen.getNv().getMaNV())) {
				listnv.remove(i);
				break;
			}
		}
		List<XeKhach> listxk = dsxk();
		for(int i =0;i<listxk.size();i++) {
			if(listxk.get(i).getBienXe().equals(chuyen.getXekhach().getBienXe())) {
				listxk.remove(i);
				break;
			}
		}
		model.addAttribute("listnv", listnv);
		model.addAttribute("listxk", listxk);
		model.addAttribute("listtx", listtx);
		model.addAttribute("chuyen", chuyen);
		return "QuanLy/chuyenxe";
	}
	@RequestMapping(value = "/QL_ChuyenXe/{machuyen}", params = "update",method = RequestMethod.POST)
	public String ChuyenXeUpdate(ModelMap model, @PathVariable("machuyen") String ma,HttpServletRequest request) {
		Session session = factory.openSession();
		Transaction  transaction = session.beginTransaction();
		try {
			ChuyenXe xe = (ChuyenXe) session.load(ChuyenXe.class, request.getParameter("MaChuyen"));
			xe.setMaChuyen(request.getParameter("MaChuyen"));
			DateFormat formatter = new SimpleDateFormat("YY-MM-DD");
			Date date = formatter.parse(request.getParameter("ngKH"));
			xe.setNgKH(date);
			SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
			Time time = new Time(sdf.parse(request.getParameter("tgKH")).getTime());
			xe.setTgKh(time);
			xe.setTuyen(tuyentheoid(request.getParameter("tuyenxe")));
			xe.setXekhach(xekhachtheoid(request.getParameter("xekhach")));
			xe.setNv(nvtheoid(request.getParameter("nv")));
			xe.setGia(Float.parseFloat(request.getParameter("money")));
			session.update(xe);
			xe.setTrangthai(true);
			System.out.println("Thành Công");
			transaction.commit();
		}catch(Exception e) {
			System.out.println(e.toString());
			transaction.rollback();
		}
		return "redirect: /CNPM/QL_ChuyenXe.html";
	}
	@RequestMapping("/QL_TuyenXe")
	public String TuyenXe() {
		return "QuanLy/tuyenxe";
	}
	@RequestMapping("/QL_NhanVien")
	public String NhanVien() {
		return "QuanLy/nhanvien";
	}
}
